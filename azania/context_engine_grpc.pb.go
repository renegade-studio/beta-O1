// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: context_engine.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContextEngineClient is the client API for ContextEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContextEngineClient interface {
	// Processes a text and returns the processed text.
	ProcessText(ctx context.Context, in *ProcessTextRequest, opts ...grpc.CallOption) (*ProcessTextResponse, error)
}

type contextEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewContextEngineClient(cc grpc.ClientConnInterface) ContextEngineClient {
	return &contextEngineClient{cc}
}

func (c *contextEngineClient) ProcessText(ctx context.Context, in *ProcessTextRequest, opts ...grpc.CallOption) (*ProcessTextResponse, error) {
	out := new(ProcessTextResponse)
	err := c.cc.Invoke(ctx, "/proto.ContextEngine/ProcessText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextEngineServer is the server API for ContextEngine service.
// All implementations must embed UnimplementedContextEngineServer
// for forward compatibility
type ContextEngineServer interface {
	// Processes a text and returns the processed text.
	ProcessText(context.Context, *ProcessTextRequest) (*ProcessTextResponse, error)
	mustEmbedUnimplementedContextEngineServer()
}

// UnimplementedContextEngineServer must be embedded to have forward compatible implementations.
type UnimplementedContextEngineServer struct {
}

func (UnimplementedContextEngineServer) ProcessText(context.Context, *ProcessTextRequest) (*ProcessTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessText not implemented")
}
func (UnimplementedContextEngineServer) mustEmbedUnimplementedContextEngineServer() {}

// UnsafeContextEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextEngineServer will
// result in compilation errors.
type UnsafeContextEngineServer interface {
	mustEmbedUnimplementedContextEngineServer()
}

func RegisterContextEngineServer(s grpc.ServiceRegistrar, srv ContextEngineServer) {
	s.RegisterService(&ContextEngine_ServiceDesc, srv)
}

func _ContextEngine_ProcessText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextEngineServer).ProcessText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextEngine/ProcessText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextEngineServer).ProcessText(ctx, req.(*ProcessTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContextEngine_ServiceDesc is the grpc.ServiceDesc for ContextEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContextEngine",
	HandlerType: (*ContextEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessText",
			Handler:    _ContextEngine_ProcessText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "context_engine.proto",
}
